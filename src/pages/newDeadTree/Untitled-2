    ionViewDidLoad() {
        var that = this;
        if (localStorage["deadBind"]) {

            var tmpStorage2 = [];

            tmpStorage2 = JSON.parse(localStorage["deadBind"]);

            var i = 0;

            tmpStorage2.forEach(element => {


                this.httpClient.post(this.base.BASE_URL + 'app/bindId', {},
                    {
                        headers: { token: localStorage['token'] },
                        params: new HttpParams({ fromObject: { scanId: element.scanId, serial: element.serial } })
                    })
                    .subscribe(res => {
                        i++;
                        this.base.showAlert("成功绑定了", "", () => { });
                        if (tmpStorage2.length == i) {
                            localStorage.removeItem("deadBind");
                            this.base.showAlert("清理了缓存", "", () => { });
                        }
                    },
                        msg => {

                        })

            })


        }


        //deadCache
        if (localStorage["deadCache"]) {
            const loader = this.loadingCtrl.create({
                content: "缓存数据正在提交，请勿退出",
                duration: 15000
            });
            loader.present();
            var tmpStorage = JSON.parse(localStorage["deadCache"]);
            console.log("照片缓存");
            
            console.log(localStorage["deadPhotoCache1"]);
            console.log(localStorage["deadPhotoCache2"]);
            console.log(localStorage["deadPhotoCache3"]);
            
            
            
            if (localStorage["deadPhotoCache1"]) {
                this.photolib1 = JSON.parse(localStorage["deadPhotoCache1"]);
            }
            if (localStorage["deadPhotoCache2"]) {
                this.photolib2 = JSON.parse(localStorage["deadPhotoCache2"]);
            }
            if (localStorage["deadPhotoCache3"]) {
                this.photolib3 = JSON.parse(localStorage["deadPhotoCache3"]);
            }

            this.i=0;
           
            tmpStorage.forEach(element => {
                this.httpClient.post(this.base.BASE_URL + 'app/addDeviceId', {},
                    {
                        headers: { token: localStorage['token'] }, params: {
                            deviceId: element.deviceId
                        }
                    }).subscribe(res => {
                        console.log("AddDeviceId");
                        //在这里传值到后端去吧
                        //其实已经好了。。批次只有1.。。。。。。。
                        //如果一定要批次对应的话，应该只要批量传列表deviceId一次，然后前端
                        //传当前是第几次,设定好延时。。
                        console.log(res);
                        this.batch = res;
                    })

                // this.base.showAlert(element.hasPic, "hasPic状态", () => { });
                console.log(element.hasPic);

                if (element.hasPic == true) {
                    // this.base.showAlert("有照片", "", () => { });
                    console.log(element);
                    console.log(element.photoSum);

                    for (var j = 1; j <= element.photoSum; j++) {
                        (function (j) {
                            setTimeout(function () {
                                console.log(j);
                                let options: FileUploadOptions = {};
                                options.fileKey = "image";
                                var time = Date.parse(Date());
                                options.fileName = time + ".jpg";
                                options.mimeType = "image/jpeg";
                                options.chunkedMode = false;
                                options.httpMethod = "POST";
                                options.params = {
                                    deviceId: element.deviceId, longitude: element.longitude, latitude: element.latitude, altitude: element.altitude,
                                    accuracy: element.accuracy, diameter: element.diameter, height: element.height, volume: element.volume,
                                    killMethodsValue: element.killMethodsValue, remarks: element.remarks, current: j, batch: element.batch
                                };
                                options.headers = { token: localStorage['token'] };
                                console.log("options");
                                console.log(options);


                                //创建文件对象
                                const fileTransfer: FileTransferObject = that.fileTransfer.create();
                                if (j == 1) {
                                    that.currentImg = that.photolib1;
                                } else if (j == 2) {
                                    that.currentImg = that.photolib2;
                                } else if (j == 3) {
                                    that.currentImg = that.photolib3;
                                }
                                that.base.showAlert("有照片", that.currentImg[that.i].img, () => { });
                                console.log(that.i);
                                console.log(that.currentImg[that.i].img);
                                console.log(that.currentImg[that.i].img);
                                that.file.listDir(that.file.externalCacheDirectory,".").then(
                                    (par)=>{
                                        console.log("名字");
                                        console.log(par);
                                        console.log(par[0].name);
                                        var imgPath = that.currentImg[that.i].img.split("/");
                                        console.log(imgPath[imgPath.length - 1]);
                                    
                                        that.file.readAsDataURL(that.file.externalCacheDirectory, imgPath[imgPath.length - 1]).then((base64) => {
                                            console.log(base64);
                                        }, (err) => {
                                            console.log(err);

                                        }).catch((msg) => {
                                            console.log(msg);

                                        })
                                },(err)=>{
                                    console.log(err);
                                    
                                }).catch((msg)=>{
                                    console.log(msg);
                                })

                                // that.base64.encodeFile(that.currentImg[that.i].img).then((base64File: string) => {
                                //     console.log(base64File);
                                // }, (err) => {
                                //     console.log(err);
                                // });

                                // this.base.logger(JSON.stringify(options), "Img_maintenance_submit_function_fileTransferPar.txt");

                                // fileTransfer.upload(that.currentImg[that.i].img, that.base.BASE_URL + 'app/AddDeadtreePhoto', options)
                                //     .then((res) => {
                                //         console.log(res);
                                //         console.log(JSON.stringify(res));
                                //         console.log(JSON.parse(JSON.stringify(res)).message);

                                //     }, (error) => {//发送失败(网络出错等)
                                //             that.picNotExist = true;
                                //         // this.base.showAlert('提示', '提交失败', () => { });
                                //     }).catch((error) => {
                                //         that.picNotExist = true;
                                //     })

                                if (that.picNotExist) {
                                    that.httpClient.post(that.base.BASE_URL + 'app/AddDeadtrees', {},
                                        {
                                            headers: { token: localStorage['token'] }, params: {
                                                deviceId: element.deviceId, longitude: element.longitude, latitude: element.latitude, altitude: element.altitude,
                                                accuracy: element.accuracy, diameter: element.diameter, height: element.height, volume: element.volume,
                                                killMethodsValue: element.killMethodsValue, remarks: element.remarks, batch: element.batch
                                            }
                                        })
                                        .subscribe(res => {
                                            console.log(JSON.stringify(res));
                                            console.log(JSON.parse(JSON.stringify(res)).message);
                                        }, (msg) => {
                                            // this.base.showAlert('提示', '提交失败', () => { });
                                        });
                                }

                            }, (j + 1) * 1000);
                        })(j)

                    }
                    setTimeout(() => {
                        this.httpClient.post(this.base.BASE_URL + 'app/AddDeadtrees', {},
                            {
                                headers: { token: localStorage['token'] }, params: {
                                    deviceId: element.deviceId, longitude: element.longitude, latitude: element.latitude, altitude: element.altitude,
                                    accuracy: element.accuracy, diameter: element.diameter, height: element.height, volume: element.volume,
                                    killMethodsValue: element.killMethodsValue, remarks: element.remarks, batch: element.batch
                                }
                            })
                            .subscribe(res => {
                                console.log(JSON.stringify(res));
                                console.log(JSON.parse(JSON.stringify(res)).message);
                                // this.base.showAlert('提示', '提交成功', () => { });
                                this.i++;
                                if (this.i >= tmpStorage.length)
                                    localStorage.removeItem('deadCache');
                            }, (msg) => {
                                // this.base.showAlert('提示', '提交失败', () => { });
                            });

                    }, 10000)

                } else {
                    this.httpClient.post(this.base.BASE_URL + 'app/AddDeadtrees', {},
                        {
                            headers: { token: localStorage['token'] }, params: {
                                deviceId: element.deviceId, longitude: element.longitude, latitude: element.latitude, altitude: element.altitude,
                                accuracy: element.accuracy, diameter: element.diameter, height: element.height, volume: element.volume,
                                killMethodsValue: element.killMethodsValue, remarks: element.remarks, batch: element.batch
                            }
                        })
                        .subscribe(res => {
                            console.log(JSON.stringify(res));
                            console.log(JSON.parse(JSON.stringify(res)).message);
                            // this.base.showAlert('提示', '提交成功', () => { });
                            this.i++;
                            if (this.i >= tmpStorage.length)
                                localStorage.removeItem('deadCache');
                        }, (msg) => {
                            // this.base.showAlert('提示', '提交失败', () => { });
                        });
                }

            });
        }

        if (localStorage["deadKill"]){
            console.log(localStorage["deadKill"]);
            this.killMethods = JSON.parse(localStorage["deadKill"]);
            console.log("缓存");
            console.log(this.killMethods);
        }
        this.httpClient.post(this.base.BASE_URL + 'app/getKillMethods', {},
            {
                headers: { token: localStorage['token'] },
                params: new HttpParams({ fromObject: { worker: localStorage['username'] } })
            })
            .subscribe(res => {
                var c: any = res;
                this.killMethods = Array.from(c);
                console.log("subb",res);
                console.log(this.killMethods);
                localStorage['deadKill'] = JSON.stringify(res);

            },
                res => {
                    console.log(res);
                })

    }